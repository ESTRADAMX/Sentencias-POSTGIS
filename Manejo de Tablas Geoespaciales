

-- Listado de comandos para el manejo inicial de datos geoespaciales en Postgre-Postgis
   --  Son comandos SQL y  ejemplos con la sintaxis básica para el manejo de los datos  


--1.- Creación de una tabla geoespacial con tipo de geometría puntos:
 -- a) creación de la tabla con campo de geometría incluida

    CREATE TABLE puntos (
    gid serial, 
    cve_point varchar(6) primary key, 
    altura int,
    geom geometry(point,4326)
     );

     -- si la tabla ha sido creada sin campo geométrico y éste se desea incluir, se agrega el campo de la siguiente forma

	   alter table puntos 
    add column geom geometry	(multipoint,4326);
     -- o
     select addgeometrycolumn ('public','puntos','geom', 4326, 	'multipoint', 2);
     
     -- eliminación de un campo, en este caso del campo geométrico:

        alter table puntos drop column geom
        -- o 
        select dropgeometrycolumn('puntos','geom');


--  b) población de la tabla 

      	--1: poblar una tabla directamente:
    
        INSERT INTO puntos (geom, altura, cve_point) 
        values 
        ( st_GeomFromText('POINT( -99.676730756959842 19.285247464898884)', 4326), 2690, 'a1'),
        (st_GeomFromText( 'POINT( -99.656254900973110 19.29123515121525)',4326),2657,'a2'),
        (st_GeomFromText( 'POINT( -99.654919288512602 19.271702964576015)',4326),2680,'a3') ;

	      --2: poblar una tabla a partir de otra tabla existente:
		   
         insert into puntos (gid, nombre, region,c_ent, geom) 
         select gid, nom_mun, region, cve_ent, geom
         from fuente_puntos ;
	 
 --creacion de tabla geoespacial a partir de tb
select *, st_setsrid(st_point(lon,lat),4326) as geom into esc_all_mexico_geom from e_completa_geometria


--2.- Creación de una tabla geoespacial con tipo de geometría lineas:
  --a) creación  
  
      CREATE TABLE lineas ( 
      gid serial,
      cve_lin varchar(5) primary key, 
      geom geometry (linestring,4326)
      );
  --b) población directa de la tabla:
  
    INSERT INTO lineas (geom,cve_lin) 
    VALUES 
    (ST_GeomFromText('linestring(-99.676730756959842 19.285247464898884,-99.664919 19.28170296)',4326),'a1'),
    (ST_GeomFromText('linestring(-99.656254900973110 19.29123515121525,-99.654919288512602 19.271702964576015)',4326),'a2');
    
 
--3.- Creación de una tabla geoespacial con tipo de geometría polígono:

 -- a) creación
  
    CREATE TABLE poligono ( 
    gid serial, 
    cve_pol varchar(5) primary key,
    geom geometry (polygon,4326)
    );
  
--  b) población directa de la tabla:
  
    INSERT INTO poligono (geom, cve_pol) 
    VALUES 
    (ST_GeomFromText('POLYGON(( -99.676730756959842 19.285247464898884, 
    -99.656254900973110 19.29123515121525, -99.654919288512602 19.271702964576015,
    -99.676730756959842 19.285247464898884))',4326), 'a1');
    
    
--4.- Creación de una tabla geoespacial con tipo de geometría multi-lineas:

 -- a) creación
    
    
    CREATE TABLE multilineas ( 
    gid serial, 
    cve_multi varchar(5) primary key, 
    altura int,
    geom geometry (multilinestring, 4326)
    );
    
 -- b) población

    INSERT INTO multilineas (geom, cve_multi, altura) 
    VALUES 
    (ST_GeomFromText('MULTILINESTRING((-99.2180429982 19.4517819566,-99.2152823819 19.4467146298),
    (-99.2134355496 19.447617472,-99.2124700931 19.4476576241,-99.2107648102 19.4472127764),
    (-99.2109194879 19.4462564486,-99.2107439854 19.4454214266,
    -99.2108499795 19.4451259518, -99.2080 19.4572 ,-99.2180429982 19.4517819566))',4326), 'a1', 2545),
    (ST_GeomFromText('MULTILINESTRING((-99.2280429982 19.4517819566,-99.2172823819 19.4497146298),
    (-99.2334355496 19.487617472,-99.2124700931 19.4476576241,-99.2107648102 19.4472127764))',4326), 'a2',  2547) ;

--5.- Creación de una tabla geoespacial con tipo de geometría multi-polígonos:

--  a) creación
  
    CREATE TABLE poligonos_multiples ( 
    gid serial, 
    cve_pol varchar(5) primary key,
    geom geometry (multipolygon,4326)
    );
  
--  b) población de una tabla geoespacial
  
    INSERT INTO poligonos_multiples (geom, cve_pol) 
    VALUES 
    (ST_GeomFromText('multipolygon((( -99.676730756959842 19.285247464898884, 
    -99.656254900973110 19.29123515121525, -99.654919288512602 19.271702964576015,
    -99.676730756959842 19.285247464898884),(-99.698837906547595 19.30264282728767,-99.652317673396198 19.268616864814696,
    -99.713257462211772 19.249818541285261,-99.698837906547595 19.30264282728767)))',4326), 'a2'),
    (ST_GeomFromText('multipolygon((( -99.616730756959842 19.283247464898884, 
    -99.653254900973110 19.27123515121525,-99.659919288512602 19.278702964576015,-99.616730756959842 19.283247464898884)))',4326),'a3');
    
    
    -- creación de campo geométrico a partir de campos geometría a partir de csv
    alter table carpetas_completa_2016_2020 add column geom geometry;
UPDATE carpetas_completa_2016_2020 SET geom = st_makepoint((longitud::float), (latitud::float))
where latitud <> 'NA' and longitud <> 'NA';
    
    
-- 6.- Sistemas de Referencia Geoespacial:
    
    -- En México utilizamos coordenadas geográficas consideradas dentro del código EPSG: 4326 (sistema geográfico), así como
    --códigos referentes a proyecciones como "UTM" o "CCL". Para los códigos EPSG-UTM se encuentran dentro de los 326+numero de zona UTM,
    --p.ej. EPSG: 32614 correpondiente a la zona 14 utm en la cual se encuentra la Ciudad MX o  la proyección CCL, considerada 
    --  en el  EPSG:6372. 
    
-- Definicion de coordenadas a una tabla geoespacial a la cual no se le definió sistema de referencia en su importación:

  -- a)se agrega, a la tabla de interes, el campo que contendrá la geometría y la especificación del sistema de referencia que corresponda: 
  ALTER TABLE red_vial ADD COLUMN geom_  geometry (MultiLineString,4326);
  -- b) se actualiza el campo agregado a partir del campo geom existente:
  UPDATE red_vial SET geom_=ST_SetSRID(geom,4326);
  -- c) se elimina la columna geométrica que no contaba con sistema de referencia
  ALTER TABLE red_vial DROP COLUMN geom RESTRICT;
  
  
  -- Cambio de sistema de coordenadas
    --a) Se agrega campo geométrico con los parametros que se pretende  tenga la nueva referencia espacial
  
  SELECT AddGeometryColumn('public', 'mitabla_utm', 'geom_utm', 32614, 'Point',2);
    --b) actualizo el campo realizando la transformación de coordenadas 
  UPDATE robos_utm SET geom_utm = ST_Transform(geom, 32614);
    --c) elimino el campo de geometría anterior
  SELECT DropGeometryColumn('robos_utm', 'geom');
  
  -- Indexado a tablas geoespaciales
    --d) es relevante crear un indice espacial para agilizar busquedas
  CREATE INDEX idx_puntos_utm ON puntos_utm  USING gist(geom_utm);
  
  --Eliminacion de tablas
  
     DROP TABLE puntos;
  
 							 
-- análisis geoespacial


  -- distancia
   -- ejemplo: selecciona la cantidad de postes de internet que tiene cada una de las avenidas de la CDMX dentro de  una distania de 450 mts.  
      SELECT a.geom, a.nomavenida, count(b.geom) as postes_internet into postes_avenidas  
      FROM avenidas_df as a, postes_internet  as b 
      where st_distance(a.geom, b.geom) <= 450 GROUP BY a.geom, a.nomvial ORDER BY postes_internet DESC;

  -- unión  o disolución
      -- ejemplo : unir los segmentos de una vialidad en funcion de su nombre.
      SELECT row_number() OVER () AS "gid", nomvial, st_union(geom) as geom into avenidas_df 
      FROM avenidas_cdmx 
      GROUP BY nomvial;

  -- buffer
      -- ejemplo : crea una nueva tabla con un bufer de 700mts.  referente a las avenidas de la CDMX  
      
      select  st_buffer(geom, 700) 
      into buffer_vialidades 
      from avenidas_df 


  -- contains 
-- seleccina contenido de una capa dentro de otra, si se desea se pueden  agrupar  resultados por alguna variable 
-- ejemplo:  cantidad de vialidades por tipo de vialidad en la CDMX, considerando que la tabla de insumo tiene datos de vialidades de todos los estados 
 -- en México
  
    select count(r.tipo_vial), r.tipo_vial from red_vial as r, estados as e 
    where st_contains(e.geom, r.geom_) and e.nom_ent = 'Ciudad de México'  
    group by tipo_vial;

-- Intersect    hacer una selección y asignación de datos en una nueva tabla  en función del  área de polígonos que se interseta, ej. más de 80% 

  select a.edo_reg, b.cvegeo, b.nom_mun, b.geom 
  into mun_2015y_reg
  from regiones as a, pob_muni01 as b
  where st_intersects(a.geom,b.geom) 
  and (st_area(st_intersection(a.geom,b.geom))/st_area(b.geom)) >0.80 
  order by edo_reg; 




 --estadística básica
  select count(n) as total_casos ,max(n) as valor_maximo,   min(n) as valor_minimo, mode() within group (order by n) as moda,
   (max(n::numeric)- min(n::numeric)) as rango, avg(pobtot) as promedio, stddev_pop(n) as desviacion_std,var_pop(n) as varianza 
  from poblacion;

-- información referente a la estructura de tablas
  select column_name, data_type, udt_name 
  from information_schema.columns
   where table_schema = 'public' and table_name = 'municipios';
   

-- Generales:

--   valor diferente en consulta a cadenas
select  * from siged_completo  where niv_edu != 'OTRO NIVEL EDUCATIVO'

   -- exportar tablas a csv

    copy (SELECT ductos_inegi.* from ductos_inegi , estados where st_contains(estados.geom, ductos_inegi.geom) and estados.nom_ent = 'Campeche') to 'C:\ductos_.csv' with csv header;

    -- copia resultados a archivo csv con indentificador unico
    copy (SELECT row_number() OVER () AS "gid", tomas.municipio, tomas.fecha2  from tomas , municipios where st_contains(municipios.geom, tomas.geom) and municipios.cvgeo = '15106') to 'C:\tomas_tol2_.csv' with csv header;

    copy (select * from tomas as t, municipios as m where st_contains(m.geom,t.geom) and m.cvgeo = '15106' order by fecha2 desc) to 'C:\ductos_.csv' with csv header;

    -- incorporar SHAPES a Postgres desde linea de comando (cmd)

   C:\PostgreSQL\pg96\bin>shp2pgsql -I -s 4326 C:\shp_solo_mun_tomas.shp public.prueba_componentes | psql -U postgres -d db1
   
   
   --creación y actualización de campos a partir de campos existentes con cadenas  (valores a la izquierda, derecha, o en el interior)
	
	alter table ageb add column localidad varchar(3)

	update ageb set ent= left(cvegeo,2)
	update ageb set mun= substring(cvegeo,3,3)
	update ageb set localidad= right(cvegeo,3)
	
-- crear y actualizar nuevo  campo a partir de campo existente modificando tipo de dato  
 update  coneval_indicadores_pobreza_municipal_2015 set  plbm_pob_ = case when plbm_pob= 'n.d' then 0 
 else cast(plbm_pob as integer) end    
 
 
 -- redondear valor de campo a dos decimales
 round(((morbi/poblacion)*1000),2) as tasa_del_1000
 
 
 -- reemplazar valores en una registro 
update tam.inci_2018re set n_class = 'ALLHABITACION'	
where n_class= 'AHABITACION'
 
 -- agregar campo de reclas de valores y reclasificar 
alter table ver_ add column reclas_rpm float
update ver_age set reclas_rpm=
case 
  WHEN  "indice_rpm" = 0  THEN 0 
  WHEN  "indice_rpm" < 1.1  THEN 1 
  WHEN  "indice_rpm" < 2.1  THEN 2 
   WHEN  "indice_rpm" < 3.1  THEN 3
     WHEN  "indice_rpm" < 4.1  THEN 4 
	   WHEN  "indice_rpm" > 4  THEN 5 
end

---

-- cambio de tipo de estructura geométrica en este caso  multipoint por point

alter table incidencias_v3_12426 add column geome geometry (point,4326)
update incidencias_v3_12426 set geome= st_geometryn (geom,1) 
select * from incidencias_v3_12426 limit 1
alter table incidencias_v3_12426 drop column geom
alter table incidencias_v3_12426 rename column geome to geom


--para seleccionar registros de una tabla en donde un campo comienza con algun caracter de interes
select geom, cvegeo, pob_2010,imu2010, gmu2010 
from  public.agebs_imu2010_conapo  
where  cvegeo like '15%' or   cvegeo like '09%'
 
 
 --rellenar con ceros columnas a la izquierda o derecha.  lpad rpad
alter table veracruz_colonias_ife2010 add column cve_muni varchar(3)
update veracruz_colonias_ife2010 set cve_muni = lpad(municipio::text, 3, '0')

-- minusc y mayusc  en campo
update tam.inc2018re set n_class = UPPER(n_class)
update tam.i_2018re set n_class = LOWER(n_class)

--reemplazo valor nulo , actualizar tabla
update geografico.a_inegi_municipios_intercensales_2015_ok  set cvegeom= 23011 where cvegeom is null
-- union tabla dando prioridad der
select a.geom, b.* into geografico.a_tablabase_municipal_multiescalas_2458 from geografico.a_inegi_municipios_intercensales_2015_ok as a 
join geografico.a_tablabase_municipal_multiescalas_ok as b
on a.cvegeom = b.cvegeo

-- renombra campo
alter table geografico.a_tablabase_municipal_multiescalas_ok rename geom to geom_


-- reemplazar un valor dentro de un campo 
update catalogo_marco_geoestadistico_y_territorial_mx.a_ine_colonias_2010_333 set nombre = regexp_replace(nombre, 'ï¿½', 'Ñ', 'g');

-- relleno campo nulo
 select COALESCE(cve_zm,0) AS metropolis from "200420COVID19MEXICO_CON_METROPOLIS" order by 
 cve_zm desc

-- intersec
select st_intersection(a.geom, b.geom) as bgeom, a.*, b.cvegeo 
 from geografico.a_conafor_areas_conserv_restaur_producc_2011 as a,
 division_politico_administrativa_mx.a_dep206_municipios_2019 as b 
 where b.cvegeo = '15106' and st_intersects(a.geom,b.geom) ;

-- columnas existentes en una tabla 
 copy (
SELECT column_name as campo, column_name as descripcion                
FROM information_schema.columns    
WHERE table_schema = 'tablas_estadisticas'     
AND table_name   = 'coneval_agebs_rezago_social_2010'   
) to 'D:\ALFREDO\insumos p bd\descriptores_bdnacional\desc_ coneval_agebs_rezago_social_2010.csv' with csv header

-- extraer palabras de un texto convirtiendolo en arreglo y generando tabla alterna
select a.index, a.x[1] as m, b.subgrupobio from (	
select regexp_split_to_array(subgrupobio,E'\\s+') as x, index 
from tablas_geograficas.p_conabio_mamiferos_2019 limit 3000
) as a,  tablas_geograficas.p_conabio_mamiferos_2019 as b 
where a.index = b.index;
--
-- agrego campo y actualizo en funcion de extraer valores de un campo
ALTER TABLE datos_limpios_defunci_60mas ADD COLUMN cvegeo2 varchar
update datos_limpios_defunci_60mas set cvegeo2 = CONCAT(substring(CVEGEO,1,2),substring(CVEGEO from 4 for 3))
update  datos_limpios_defunci_60mas set cvegeo = cvegeo2
alter table datos_limpios_defunci_60mas drop column cvegeo2

-- unir tablas
select * from tabla1
union all
select * from tabla2;

-- consultas con filtros
select clave, sum(pob) filter(where "año" = '2015') as pob2015, 
sum(pob) filter(where "año" = '2020') as pob2020,
sum(pob) filter(where "año" = '2030') as pob2030
from fuente_conapo_proyecciones_municipales_2030 group by clave order by pob2030 desc

--datos para consult por fechas

alter table "200721COVID19MEXICO" add column fecha_sint date;
update "200721COVID19MEXICO" set fecha_sint = "FECHA_SINTOMAS"::DATE
SELECT *  --into "200720COVID19MEXICO_activos" 
FROM "200721COVID19MEXICO" 
WHERE "RESULTADO" = '1' and  fecha_sint BETWEEN '$2020-07-08' AND '$2020-07-21' order by fecha_sint asc; 

-- eliminar registros duplidados

delete from ss_c_googleok
    where exists (select 1
                  from ss_c_googleok t2
                  where t2.cve = ss_c_googleok.cve
                  and t2.ctid > ss_c_googleok.ctid
                 );
                      -- si quiero eliminar por más campos
                        t2.address = mytable.address and
                        t2.zip = mytable.zip and
                        t2.ctid > mytable.ctid
                 );
		 
		 
-- union izquierda a ciertos registros
	select a.*, b.cvegeoloc as cvloc_ageeml, b.lat_decima, b.lon_decima, b.geom as geom2
	into t_ss_union_b_cat_ageeml
	from  (select * from t_ss_union_a_iter where x_long is null) as a left join  ss_b_ageeml as b
	on a.cvegeoloc = b.cvegeoloc order by lat_decima desc

-- Administrativo  o gestion  administración

-- Tamaño de la BD
SELECT pg_database.datname, pg_size_pretty(pg_database_size(pg_database.datname)) 
AS size FROM pg_database where datname = 'bd_muestra';

--Listado de tablas en la bd

	
SELECT  table_name, table_type, table_schema,table_catalog
FROM information_schema.tables
WHERE table_catalog = 'bd_muestra'
AND table_schema = 'public'

- Relaciones y restricciones entre las tablas
select tabla as tabla_base, tabla_relacionada, campo as campo_relacion, constraint_ from(
select distinct(constraint_name) as constraint_, column_name as campo, foreign_table_name as tabla, table_name as tabla_relacionada  from (
SELECT
    tc.table_schema, 
    tc.constraint_name, 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_schema AS foreign_table_schema,
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name 
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu
      ON tc.constraint_name = kcu.constraint_name
      AND tc.table_schema = kcu.table_schema
    JOIN information_schema.constraint_column_usage AS ccu
      ON ccu.constraint_name = tc.constraint_name
      AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY'
	) as mia
	)as mc
	

-- Atributos en las tablas y tipos de datos  


SELECT table_name, column_name, data_type 
FROM information_schema.columns   
WHERE table_schema = 'public'   
order by table_name asc
	


-- Síntesis Esquemas, tablas, columnas y registros 
select * from ( 
select a.*, b.esquema, c.size from (   
   SELECT oid,relname as nom_tabla, obj_description(oid) as temas_relacionados,  relnatts as columnas, reltuples as registros
FROM pg_class) as a , (select schemaname as esquema, tablename as tablas  from pg_catalog.pg_tables) as b  , (SELECT
relname as table,
pg_size_pretty(pg_total_relation_size(relid)) As size
FROM pg_catalog.pg_statio_user_tables) as c
where a.nom_tabla = b.tablas  and a.nom_tabla= c.table
group by a.oid, esquema, a.nom_tabla, temas_relacionados, registros, columnas, c.size 
order by esquema desc 
	
	) as mc 
	





-- seleccionar tablas dentro de esquemas



	SELECT table_name, table_schema       

	FROM information_schema.tables

	where table_schema not like 'public'

	and  table_schema not like 'tiger' 

	and table_schema  not like 'tiger_data' 

	and  table_schema not like 'topology'

	 and  table_schema not like 'django_admin' 

	 and  table_schema not like 'information_schema' 

	 and  table_schema not like 'pg_catalog' 

	 and  table_schema not like 'censo_gobiernos' ;





-- seleccionar columnas y tipos de dato dentro de tablas 

	SELECT table_name, column_name, data_type          

	FROM information_schema.columns     

	WHERE table_schema = 'dimension_educacion'  

	and table_name = 'centros_de_atencion_multiple_cam_2019_sep'

	order by table_name asc

--contar tablas por esquema

	select count(table_name), table_schema from (

	SELECT table_name, table_schema       

	FROM information_schema.tables ) as mea group by table_schema order by table_schema asc


--- seleccionar bd, esquemas, tablas, columnas y tipos de datos en columnas para todo lo que hay dentro de la bd
	SELECT *        

	FROM information_schema.columns 

	where table_schema not like 'public'

	and  table_schema not like 'tiger' 

	and table_schema  not like 'tiger_data' 

	and  table_schema not like 'topology'

	 and  table_schema not like 'django_admin' 

	 and  table_schema not like 'information_schema' 

	 and  table_schema not like 'pg_catalog' 

	-- and  table_schema not like 'censo_gobiernos' 



order by table_schema asc ;


-- geoserv tablas administración campos y tablas :

select a.*, b.tabla, b.nombre, b.in_geoserver,b.visibility from django_admin.cat_atributos as a

left join django_admin.cat_datasets as b on a.dataset_id = b.id

order by dataset_id asc

-- datos en catalogo de admon geoserver
select * from django_admin.cat_datasets  

 where visibility = 'publico'

--


select * from  django_admin.cat_datasets order by id asc limit 7

select * from  django_admin.cat_epsgs  limit 7

select * from  django_admin.cat_grupos limit 7

select * from  django_admin.cat_metadatos limit 7

select * from  django_admin.cat_proveedores limit 7



--

-- conocer todas las tablas, columnas, registros y tamaños de tablas en las bd


select * from ( 

select a.*, b.esquema, c.size from (   

   SELECT oid,relname as nom_tabla, obj_description(oid) as temas_relacionados,  relnatts as columnas, reltuples as registros

FROM pg_class) as a , (select schemaname as esquema, tablename as tablas  from pg_catalog.pg_tables) as b  , (SELECT

relname as table,

pg_size_pretty(pg_total_relation_size(relid)) As size

--pg_size_pretty(pg_total_relation_size(relid) – pg_relation_size(relid)) as external_size

FROM pg_catalog.pg_statio_user_tables) as c

where a.nom_tabla = b.tablas  and a.nom_tabla= c.table

and (b.esquema like 'd%%' or  b.esquema like 'c%%' or  b.esquema like 'gasto%%' or  b.esquema like 'impacto%%' or  b.esquema like 'seguri%%'   )

group by a.oid, esquema, a.nom_tabla, temas_relacionados, registros, columnas, c.size 

order by esquema desc 


	) as mea order by  esquema, nom_tabla asc

	
-- tamaño en bases de datos  de postgres

select * from (

	SELECT  db.datname AS nombre_db,

	pg_size_pretty( pg_database_size(db.datname)) AS tamano,

	pg_database_size(db.datname) AS tamano_detalle

	FROM    pg_database AS db 
)  as mea where nombre_db = 'b_database'



-- booleano para conocer valores entre  campos iguales
select cct, a_financ, mont_av_int,("a_financ"::real = "mont_av_int")::boolean as is_boolean
from escuelas_alcien_ok  order by is_boolean asc


-- duplicados en registros
delete from ss_d_google_nolocalizadas
    where exists (select 1
                  from ss_d_google_nolocalizadas t2
                  where t2.cv_goonl = ss_d_google_nolocalizadas.cv_goonl
                  and t2.ctid > ss_d_google_nolocalizadas.ctid
                 );

--Centroides
SELECT ST_CENTROID(___shp_entidades_covid_0720.geom) AS geom, cve_ent
--into centroides_estados 
FROM ___shp_entidades_covid_0720

select * from centroides_estados

SELECT ST_pointONsurface(___shp_entidades_covid_0720.geom) AS geom, cve_ent
--into cen_pointosurface_estados 
FROM ___shp_entidades_covid_0720

-- buenisima 
SELECT point_inside_geometry(borra_punto.geom) AS geom
into cen_pointinside_borra_punto
FROM borra_punto

--
CREATE OR REPLACE FUNCTION point_inside_geometry(param_geom geometry)
  RETURNS geometry AS
$$
  DECLARE
     var_cent geometry := ST_Centroid(param_geom);
     var_result geometry := var_cent;
  BEGIN
  -- If the centroid is outside the geometry then
  -- calculate a box around centroid that is guaranteed to intersect the geometry
  -- take the intersection of that and find point on surface of intersection
 IF NOT ST_Intersects(param_geom, var_cent) THEN
  var_result := ST_PointOnSurface(ST_Intersection(param_geom, ST_Expand(var_cent, ST_Distance(var_cent,param_geom)*2) ));
 END IF;
 RETURN var_result;
  END;
  $$
  LANGUAGE plpgsql IMMUTABLE STRICT
  COST 100;

--- coalesce  null  nulos reemplazar
SELECT
	product,
	(price - COALESCE(discount,0)) AS net_price
FROM
	items;

-- estadisticas 1
select count(monto_dec) as universo ,max(monto_dec) as valor_maximo,   min(monto_dec) as valor_minimo, mode() within group (order by monto_dec) as moda,
   (max(monto_dec::numeric)- min(monto_dec::numeric)) as rango, avg(monto_dec) as promedio, median(monto_dec) as mediana,  stddev_pop(monto_dec) as desviacion_std,var_pop(monto_dec) as varianza 
  from escuelas_alcien_ok;
  
  -- estadisticos con coeficiente de variacion
   select *, (desviacion_std::float/promedio::float) as coef_var from (
	    select count(pobtot_d) as poblacion ,max(pobtot_d) as valor_maximo,   min(pobtot_d) as valor_minimo, 
  mode() within group (order by pobtot_d) as moda, (max(pobtot_d::numeric)- min(pobtot_d::numeric)) as rango
  , median(pobtot_d) as mediana,round(avg(pobtot_d),3) as promedio,   round(stddev_pop(pobtot_d),3)
  as desviacion_std,round(var_pop(pobtot_d),3) as varianza, count(*) filter( where pobtot is null) as nulos
  from shp_iter_mx_2010
	  ) as mea;
  
  --
  CREATE FUNCTION _final_median(anyarray) RETURNS float8 AS $$ 
  WITH q AS
  (
     SELECT val
     FROM unnest($1) val
     WHERE VAL IS NOT NULL
     ORDER BY 1
  ),
  cnt AS
  (
    SELECT COUNT(*) as c FROM q
  )
  SELECT AVG(val)::float8
  FROM 
  (
    SELECT val FROM q
    LIMIT  2 - MOD((SELECT c FROM cnt), 2)
    OFFSET GREATEST(CEIL((SELECT c FROM cnt) / 2.0) - 1,0)  
  ) q2;
$$ LANGUAGE sql IMMUTABLE;

CREATE AGGREGATE median(anyelement) (
  SFUNC=array_append,
  STYPE=anyarray,
  FINALFUNC=_final_median,
  INITCOND='{}'
);
--

-- disolver con postgi
select distinct ST_Union(geom) as geom, county as county, sum(schools) as schools,
sum(childcare), sum(respopint) as rez, etc... into countyreport
from munsumreport
group by county;

--operadores
operadores relacionales son los siguientes:

=	igual
<>	distinto
>	mayor
<	menor
>=	mayor o igual
<=	menor o igual

-- registros cuyo autor sea diferente de "Borges"

 select * from libros
  where autor<>'Borges';
  
  --  valores dominio
  --Crear dominio
create domain d_provincias as varchar(20) check(value in ('Castellon', 
 'Toluca', 'México'));
--tabla
CREATE TABLE public.prueva_dominio(
id INT,
estado d_provincias);
select * from prueva_dominio;

INSERT INTO prueva_dominio (id, estado) 
        values 
        ( 3, 'Alicante'),( 4, 'Toluca') ;

---
gserv
centrar etiqueta en polígonos
 <se:Rule>
          <se:TextSymbolizer>
        <se:Geometry>
          <ogc:Function name="centroid">
            <ogc:PropertyName>geom</ogc:PropertyName>
          </ogc:Function>
        </se:Geometry>
        <se:Label>
          <ogc:PropertyName>nom_mun</ogc:PropertyName>
        </se:Label>
        <se:Font>
          <se:CssParameter name="font-family">Arial</se:CssParameter>
          <se:CssParameter name="font-size">11</se:CssParameter>
          <se:CssParameter name="font-style">normal</se:CssParameter>
          <se:CssParameter name="font-weight">bold</se:CssParameter>
        </se:Font>
        <se:LabelPlacement>
          <se:PointPlacement>
            <se:AnchorPoint>
              <se:AnchorPointX>
                <ogc:Literal>0.0</ogc:Literal>
              </se:AnchorPointX>
              <se:AnchorPointY>
                <ogc:Literal>0.5</ogc:Literal>
              </se:AnchorPointY>
            </se:AnchorPoint>
            <se:Rotation>
              <ogc:Literal>0</ogc:Literal>
            </se:Rotation>
          </se:PointPlacement>
        </se:LabelPlacement>

        <se:VendorOption name="conflictResolution">true</se:VendorOption>
        <se:VendorOption name="goodnessOfFit">0</se:VendorOption>
        <se:VendorOption name="autoWrap">60</se:VendorOption>
    
      </se:TextSymbolizer>
        </se:Rule>

---



